// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	detailtransactions "TokoGadget/internal/features/detail_transactions"

	mock "github.com/stretchr/testify/mock"
)

// DTQuery is an autogenerated mock type for the DTQuery type
type DTQuery struct {
	mock.Mock
}

// AddToCart provides a mock function with given fields: _a0, _a1
func (_m *DTQuery) AddToCart(_a0 uint, _a1 uint) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddToCart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckStockPerProduct provides a mock function with given fields: _a0, _a1
func (_m *DTQuery) CheckStockPerProduct(_a0 uint, _a1 uint) bool {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CheckStockPerProduct")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, uint) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeleteCart provides a mock function with given fields: _a0
func (_m *DTQuery) DeleteCart(_a0 uint) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCart provides a mock function with given fields: _a0
func (_m *DTQuery) GetAllCart(_a0 uint) ([]detailtransactions.AllDetailTransactions, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCart")
	}

	var r0 []detailtransactions.AllDetailTransactions
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]detailtransactions.AllDetailTransactions, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint) []detailtransactions.AllDetailTransactions); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]detailtransactions.AllDetailTransactions)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCart provides a mock function with given fields: _a0, _a1
func (_m *DTQuery) UpdateCart(_a0 uint, _a1 uint) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDTQuery creates a new instance of DTQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDTQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *DTQuery {
	mock := &DTQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
