// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	transactions "TokoGadget/internal/features/transactions"

	mock "github.com/stretchr/testify/mock"
)

// TServices is an autogenerated mock type for the TServices type
type TServices struct {
	mock.Mock
}

// Checkout provides a mock function with given fields: transactionID
func (_m *TServices) Checkout(transactionID uint) (string, bool, error) {
	ret := _m.Called(transactionID)

	if len(ret) == 0 {
		panic("no return value specified for Checkout")
	}

	var r0 string
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(uint) (string, bool, error)); ok {
		return rf(transactionID)
	}
	if rf, ok := ret.Get(0).(func(uint) string); ok {
		r0 = rf(transactionID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint) bool); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(uint) error); ok {
		r2 = rf(transactionID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteTransaction provides a mock function with given fields: _a0
func (_m *TServices) DeleteTransaction(_a0 uint) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTransactions provides a mock function with given fields: _a0
func (_m *TServices) GetAllTransactions(_a0 uint) ([]transactions.Transaction, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTransactions")
	}

	var r0 []transactions.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]transactions.Transaction, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint) []transactions.Transaction); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: _a0
func (_m *TServices) GetTransaction(_a0 uint) (transactions.Transaction, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 transactions.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (transactions.Transaction, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint) transactions.Transaction); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(transactions.Transaction)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestMidtransPayment provides a mock function with given fields: transactionID
func (_m *TServices) RequestMidtransPayment(transactionID uint) (string, error) {
	ret := _m.Called(transactionID)

	if len(ret) == 0 {
		panic("no return value specified for RequestMidtransPayment")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (string, error)); ok {
		return rf(transactionID)
	}
	if rf, ok := ret.Get(0).(func(uint) string); ok {
		r0 = rf(transactionID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTServices creates a new instance of TServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *TServices {
	mock := &TServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
