// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	detailtransactions "TokoGadget/internal/features/detail_transactions"

	mock "github.com/stretchr/testify/mock"

	transactions "TokoGadget/internal/features/transactions"
)

// DTServices is an autogenerated mock type for the DTServices type
type DTServices struct {
	mock.Mock
}

// AddToCart provides a mock function with given fields: _a0, _a1
func (_m *DTServices) AddToCart(_a0 uint, _a1 uint) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddToCart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCart provides a mock function with given fields: _a0
func (_m *DTServices) DeleteCart(_a0 uint) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCart provides a mock function with given fields: _a0
func (_m *DTServices) GetAllCart(_a0 uint) (transactions.Transaction, []detailtransactions.AllDetailTransactions, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCart")
	}

	var r0 transactions.Transaction
	var r1 []detailtransactions.AllDetailTransactions
	var r2 error
	if rf, ok := ret.Get(0).(func(uint) (transactions.Transaction, []detailtransactions.AllDetailTransactions, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint) transactions.Transaction); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(transactions.Transaction)
	}

	if rf, ok := ret.Get(1).(func(uint) []detailtransactions.AllDetailTransactions); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]detailtransactions.AllDetailTransactions)
		}
	}

	if rf, ok := ret.Get(2).(func(uint) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateCart provides a mock function with given fields: _a0, _a1
func (_m *DTServices) UpdateCart(_a0 uint, _a1 uint) (bool, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCart")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDTServices creates a new instance of DTServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDTServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *DTServices {
	mock := &DTServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
